name: Bootstrap TF Backend

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION:      ${{ vars.AWS_REGION }}
  TF_STATE_BUCKET: ${{ vars.TF_STATE_BUCKET }}
  TF_STATE_TABLE:  ${{ vars.TF_STATE_TABLE }}

jobs:
  bootstrap:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create S3 bucket (idempotent)
        shell: bash
        run: |
          set -euo pipefail
          if aws s3api head-bucket --bucket "$TF_STATE_BUCKET" 2>/dev/null; then
            echo "Bucket exists: $TF_STATE_BUCKET"
          else
            aws s3api create-bucket \
              --bucket "$TF_STATE_BUCKET" \
              --create-bucket-configuration LocationConstraint="$AWS_REGION"
            echo "Created bucket $TF_STATE_BUCKET"
          fi

          # Enable versioning & encryption
          aws s3api put-bucket-versioning --bucket "$TF_STATE_BUCKET" --versioning-configuration Status=Enabled
          aws s3api put-bucket-encryption --bucket "$TF_STATE_BUCKET" --server-side-encryption-configuration '{
            "Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]
          }'

      - name: Create DynamoDB table (idempotent)
        shell: bash
        run: |
          set -euo pipefail
          if aws dynamodb describe-table --table-name "$TF_STATE_TABLE" >/dev/null 2>&1; then
            echo "DynamoDB table exists: $TF_STATE_TABLE"
          else
            aws dynamodb create-table \
              --table-name "$TF_STATE_TABLE" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST
            echo "Created table $TF_STATE_TABLE"
          fi
